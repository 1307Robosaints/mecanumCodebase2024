// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.DutyCycleEncoder;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Sensors extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

private DigitalInput limitSwitch;
private DutyCycleEncoder encoder;
double encoderOuterLimitValue;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Sensors() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
limitSwitch = new DigitalInput(4);
encoder = new DutyCycleEncoder(3);
encoder.reset();

encoderOuterLimitValue = 1;        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        System.out.println("l1 " + (encoder.getAbsolutePosition() > .58) + ", " + encoder.getAbsolutePosition());
        System.out.println("l2 " + (encoder.getAbsolutePosition() < .17) +", " + encoder.getAbsolutePosition());
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void knockoffSwerveDrive(){


    }
    public Boolean isOn() {
        return (!limitSwitch.get()); // (!) inverts (true -> false and false -> true. remove if you need to invert)
    }
    public Boolean encoderInnerLimitReached() {
        return ((0.15+0.02) < encoder.getAbsolutePosition());

    }
      public Boolean encoderOuterLimitReached() {
        
        
        return (encoder.getAbsolutePosition() < .58);   
    }
        

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}


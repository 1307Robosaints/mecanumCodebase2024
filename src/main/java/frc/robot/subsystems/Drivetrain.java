// RobotBuilder Version: 5.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.Joystick;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.MecanumDrive;
import edu.wpi.first.wpilibj.motorcontrol.MotorController;
//import edu.wpi.first.wpilibj.motorcontrol.PWMVictorSPX;
import com.revrobotics.CANSparkMax;
import com.revrobotics.CANSparkLowLevel.MotorType;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Drivetrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private CANSparkMax driveFrontLeft;
private CANSparkMax driveBackLeft;
private CANSparkMax driveFrontRight;
private CANSparkMax driveBackRight;
private MecanumDrive mecanumDrive1;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public Drivetrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
driveFrontLeft = new CANSparkMax(3, MotorType.kBrushless);
 //addChild("driveFrontLeft",driveFrontLeft);
 driveFrontLeft.setInverted(false);

driveBackLeft = new CANSparkMax(2, MotorType.kBrushless);
 //addChild("driveBackLeft",driveBackLeft);
 driveBackLeft.setInverted(false);

driveFrontRight = new CANSparkMax(0, MotorType.kBrushless);
 //addChild("driveFrontRight",driveFrontRight);
 driveFrontRight.setInverted(false);

driveBackRight = new CANSparkMax(1, MotorType.kBrushless);
 //addChild("driveBackRight",driveBackRight);
 driveBackRight.setInverted(false);

mecanumDrive1 = new MecanumDrive(driveFrontLeft, driveBackLeft,
driveFrontRight, driveBackRight);
 addChild("Mecanum Drive 1",mecanumDrive1);
 mecanumDrive1.setSafetyEnabled(true);
mecanumDrive1.setExpiration(0.1);
mecanumDrive1.setMaxOutput(1.0);



        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void knockoffSwerveDrive(Joystick joystick){
        double maxSpeed = ((joystick.getRawAxis(3)*-1)+1
        )*0.5;
        double y = joystick.getX()*maxSpeed; // YES I KNOW IT SEEMS STUPID THAT GETX IS USED FOR THE Y VARIABLE, OUR JOYSTICKS ARE KINDA JANK AND THEY INVERT THE AXES
        double x = joystick.getY()*maxSpeed;
        double theta = joystick.getTwist(); //this could be disasterous idfk
        //note that we will probably want to replace this with field oriented once we have the means
        mecanumDrive1.driveCartesian(x, y, theta);

    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

